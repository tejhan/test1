name: Deploy redis

on:
  push:
    branches:
      - "main"
    paths:
      - 'k8s/redis-deployment.yaml'
      - '.github/workflows/deploy-redis.yml'
  pull_request:
    branches:
      - "main"
    paths:
      - 'k8s/redis-deployment.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  DEPLOYMENT_NAMESPACE: default
  APP_NAME: redis

jobs:

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

        - name: Azure Login (Service Principal)
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.DEPLOYMENT_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy application
      run: |
        echo "Deploying ${{ env.APP_NAME }} to namespace ${{ env.DEPLOYMENT_NAMESPACE }}"
        kubectl apply -f k8s/redis-deployment.yaml
        
    - name: Wait for rollout completion
      run: |
        kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.DEPLOYMENT_NAMESPACE }} --timeout=600s

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        kubectl get pods -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis
        kubectl get services -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis
        
        # Check if all pods are ready
        kubectl wait --for=condition=ready pod -l app=redis -n ${{ env.DEPLOYMENT_NAMESPACE }} --timeout=300s

    - name: Get service information
      run: |
        echo "Service information:"
        kubectl get svc -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis -o wide
        
        # If LoadBalancer, show external IP
        if kubectl get svc -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis -o jsonpath='{.items[0].spec.type}' | grep -q "LoadBalancer"; then
          echo "Waiting for LoadBalancer external IP..."
          kubectl get svc -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis --watch --timeout=300s
        fi

    - name: Run post-deployment tests
      run: |
        echo "Running basic connectivity tests..."
        
        # Test pod connectivity
        POD_NAME=$(kubectl get pods -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis -o jsonpath='{.items[0].metadata.name}')
        if [ ! -z "$POD_NAME" ]; then
          echo "Testing connectivity to pod $POD_NAME"
          kubectl exec -n ${{ env.DEPLOYMENT_NAMESPACE }} $POD_NAME -- /bin/sh -c "echo 'Pod is responsive'"
        fi

  cleanup-failed-deployments:
    name: Cleanup on failure
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

        - name: Azure Login (Service Principal)
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Show deployment status
      run: |
        echo "Deployment failed. Showing current status:"
        kubectl get pods -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis
        kubectl describe deployment ${{ env.APP_NAME }} -n ${{ env.DEPLOYMENT_NAMESPACE }}
        kubectl logs -n ${{ env.DEPLOYMENT_NAMESPACE }} -l app=redis --tail=50
